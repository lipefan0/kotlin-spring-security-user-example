name: Spring Boot CI with Gradle

# Dispara o workflow em eventos de push ou pull request para a branch "master"
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    # O tipo de runner que o job vai rodar
    runs-on: ubuntu-latest

    steps:
      # 1. Faz o checkout do seu repositório para que o workflow possa acessá-lo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configura o ambiente Java (JDK). Kotlin/JVM roda sobre o Java.
      # Usando a versão 17 para corresponder ao seu build.gradle.kts
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Configura o cache para as dependências do Gradle
      # Isso acelera drasticamente as builds, pois não precisa baixar as libs toda vez
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Garante que o script do Gradle Wrapper (gradlew) tem permissão de execução
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 5. Constrói o projeto com Gradle.
      # A tarefa "build" compila o código, roda os testes e monta o artefato.
      - name: Build with Gradle
        run: ./gradlew build
